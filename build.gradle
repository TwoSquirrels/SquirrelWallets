import com.github.javaparser.JavaParser
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration
import com.github.javaparser.ast.comments.Comment
import com.github.javaparser.ast.comments.JavadocComment
import org.json.JSONObject
import org.yaml.snakeyaml.Yaml

buildscript {
    repositories{
        mavenCentral()
    }
    dependencies {
        classpath("org.yaml:snakeyaml:1.17")
        classpath("org.json:json:20210307")
        classpath("com.github.javaparser:javaparser-core:3.3.0")
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'groovy'
}

// Import project.yml with SnakeYaml
Yaml yaml = new Yaml()
JSONObject projectInfo = new JSONObject((Map<String, Object>) yaml.load(
        new FileInputStream(new File("$projectDir/project.yml"))
))

// println yaml.dump(projectInfo)

// Replace javadoc with JavaParser
new File("$projectDir/src/main/java").eachFileRecurse { file ->
    if (!file.isFile()) return
    println ">>> " + file.getName()
    def unit = JavaParser.parse(file)
    println unit
    unit.getChildNodesByType(ClassOrInterfaceDeclaration.class).stream()
            .map(classOrInterface -> {
                def comment = classOrInterface.getComment().orElse(null)
                if (comment instanceof JavadocComment) return comment
                else if (Objects.nonNull(comment)) return classOrInterface.setComment(new JavadocComment(comment.getContent())).getComment().get()
                else return classOrInterface.setComment(new JavadocComment("")).getComment().get()
            })
            .map(comment -> (comment as JavadocComment).parse())
            .forEach(javadoc -> println javadoc.toString())
            /*
Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='SquirrelWallets'}]}, blockTags=[JavadocBlockTag{type=VERSION, content='JavadocDescription{elements=[JavadocSnippet{text='1.0-SNAPSHOT'}]}', name=Optional.empty}, JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='1.0-SNAPSHOT'}]}', name=Optional.empty}, JavadocBlockTag{type=AUTHOR, content='JavadocDescription{elements=[JavadocSnippet{text='TwoSquirrels'}]}', name=Optional.empty}]}
Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This is TestClass'}]}, blockTags=[JavadocBlockTag{type=SINCE, content='JavadocDescription{elements=[JavadocSnippet{text='1.0-SNAPSHOT'}]}', name=Optional.empty}, JavadocBlockTag{type=AUTHOR, content='JavadocDescription{elements=[JavadocSnippet{text='TwoSquirrels'}]}', name=Optional.empty}]}
Javadoc{description=JavadocDescription{elements=[]}, blockTags=[]}
Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='This is TestClass3'}]}, blockTags=[]}
Javadoc{description=JavadocDescription{elements=[JavadocSnippet{text='        This is TestClass4
        Descriptions'}]}, blockTags=[]}
             */
    // TODO: Replace the code in the source file with unit.
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/')
    }
    maven {
        url = uri('https://oss.sonatype.org/content/groups/public/')
    }
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
}

group = projectInfo.getString("group")
version = projectInfo.getString("version")
description = projectInfo.getString("description")

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
